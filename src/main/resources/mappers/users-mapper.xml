<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="usersMapper">
<!-- 회원 Mapper by 귀정-->	

	<!-- users 테이블 저장용 -->
	<insert id="joinUsers1" parameterType="Users">
		INSERT INTO users
		  VALUES (
		    TO_CHAR(SEQ_U_NO.nextval),
		    #{u_email},#{u_pw},#{u_name},#{u_phone},3,null,null,#{u_intro},sysdate)
	</insert>
	
	<!-- 그외 테이블 저장용 -->
	<insert id="joinUsers" parameterType="HashMap">
		INSERT ALL
	    INTO primaryinfo VALUES (
	    (select max(to_number(u_no)) from users),
	    #{primary.u_birth},
	    #{primary.u_gender},
	    #{primary.u_loc},
	    #{primary.u_edu},
	    #{primary.u_shcool},
	    #{primary.u_job},
	    #{primary.u_height},
	    #{primary.u_weight})
	    into style values (
	    (select max(to_number(u_no)) from users),
	    #{style.s_appeal},
	    #{style.s_inter},
	    #{style.s_ds},
	    #{style.s_ls})
	    into addinfo values (
	    (select max(to_number(u_no)) from users),
	    #{add.u_blood},
	    #{add.u_char},
	    #{add.u_rei},
	    #{add.u_drinking},
	    #{add.u_smoking})
	    SELECT *
	    FROM DUAL
	</insert>
	
	<!-- 이상형 저장용 -->
	<insert id="idealSave" parameterType="Ideal">
		INSERT INTO ideal
		  VALUES (
		    (select max(to_number(u_no)) from users),
		    #{i_height},#{i_loc},#{i_edu},#{i_age},#{i_weight})
	</insert>
	
	<!-- 로그인 용 -->
	<select id="loginCheck" parameterType="string" resultType="AllUsers">
		select * from users u
		join addinfo a on a.u_no = u.u_no
		join primaryinfo p on p.u_no = u.u_no
		join style s on s.u_no = u.u_no
		join ideal i on i.u_no = u.u_no
		where u.u_email = #{u_email}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="checkId" parameterType="string" resultType="Users">
		select * from users
		where u_email = #{u_email}
	</select>

	<!-- 비밀번호 찾기 -->
	<select id="checkPw" parameterType="string" resultType="Users">
		select * from users
		where u_phone = #{u_phone}
	</select>
	
	<!-- 임시 비밀번호 변경 -->
	<update id="changePw" parameterType="Users">
		UPDATE users SET u_pw = #{u_pw} WHERE u_phone = #{u_phone}
	</update>
	
	<!-- 계정정보 수정용 -->
	<update id="accountInfoModi" parameterType="Users">
		UPDATE users 
		SET
		u_name = #{u_name}, 
		u_pw = #{u_pw},
		u_intro = #{u_intro}
		WHERE u_no = #{u_no}
	</update>
	
	<!-- 기본정보 수정용 -->
	<update id="primaryInfo" parameterType="Pinfo">
		UPDATE primaryinfo 
		SET
		u_loc = #{u_loc}, u_edu = #{u_edu}, u_shcool = #{u_shcool}, u_job = #{u_job},
		u_height = #{u_height},
		u_weight = #{u_weight}
		WHERE u_no = #{u_no}
	</update>
	
	<!-- 상대피드 계정정보용 -->
	<select id="targetUserInfo" parameterType="String" resultType="AllUsers">
		select * from users u
		join addinfo a on a.u_no = u.u_no
		join primaryinfo p on p.u_no = u.u_no
		join style s on s.u_no = u.u_no
		join ideal i on i.u_no = u.u_no
		where u.u_no = #{u_no}
	</select>

	<!-- 추가정보 수정용 -->
	<update id="addInfo" parameterType="Ainfo">
		UPDATE addinfo 
		SET
		u_blood = #{u_blood},
		u_char = #{u_char},
		u_rei = #{u_rei},
		u_smoking = #{u_smoking},
		U_DRINKING = #{u_drinking}
		WHERE u_no = #{u_no}
	</update>
	
	<!-- 스타일 정보 수정용 -->
	<update id="StyleInfo" parameterType="style">
		UPDATE style 
		SET
		S_APPEAL = #{s_appeal},
		S_INTER = #{s_inter},
		S_DS = #{s_ds},
		S_LS = #{s_ls}
		WHERE u_no = #{u_no}
	</update>
	
	<!-- 이상형 정보 수정용 -->
	<update id="idealModi" parameterType="Ideal">
		UPDATE ideal 
		SET
		i_height = #{i_height},
		i_loc = #{i_loc},
		i_edu = #{i_edu},
		i_age = #{i_age},
		i_weight = #{i_weight}
		WHERE u_no = #{u_no}
	</update>
	
	<!-- 최근 검색기록 list -->
	<select id="historyList" parameterType="String" resultType="RecentSearch">
		select rownum, u_no, search_Date, search_Text
		from recent_search
		where u_no = #{u_no}
		order by search_date desc , rownum desc
	</select>
	
	<!-- 검색결과 중복일시 upadate, 중복아닐시 insert함 -->
	<insert id="saveHistory" parameterType="RecentSearch">
		MERGE INTO recent_search
	    USING DUAL
	       ON (u_no = #{u_no} AND search_text = #{search_text})
	    WHEN MATCHED THEN
	        UPDATE SET search_date = sysdate
	    WHEN NOT MATCHED THEN
	        INSERT (u_no, search_date, search_text)
	        VALUES (#{u_no}, sysdate, #{search_text})
	</insert>
	
	<!-- 최근검색기록 전체 삭제용 -->
	<delete id="historyAllDel" parameterType="String">
		delete from recent_search where u_no = #{u_no}
	</delete>

	<!-- 검색기록 하나만 지우기 -->
	<delete id="searchOneDel" parameterType="RecentSearch">
		delete from recent_search where u_no = #{u_no} and search_text = #{search_text}
	</delete>
	
	<!-- 제일오래된 검색어 1개 지우기 -->
	<delete id="tenSizeHistory" parameterType="String">
		delete from recent_search
		where u_no = #{u_no} and
		search_date =
		(select min(search_date)
		from recent_search
		where u_no = #{u_no}
		group by u_no)
	</delete>
	
	<!-- 신고하기용  -->
	<insert id="reportInsert" parameterType="UserReport">
		INSERT INTO report
		  VALUES (
		    TO_CHAR(SEQ_R_NO.nextval),
		    #{r_text},sysdate,#{r_send_uno},#{r_rec_uno}, #{r_yn})
	</insert>

	<!-- 신고목록 보기용 -->
	<select id="userReportList" parameterType="hashmap" resultType="Report">
		<![CDATA[
			select rownum, r_no, r_text, u_name, r_date, r_yn
			from (select rownum, r_no, r_text, u_name, r_date, r_yn from report 
			join users u on r_rec_uno = u_no
			where r_send_uno = #{u_no}
			order by r_date desc, rownum desc)
			group by rownum, r_no,r_text, u_name, r_date, r_yn
			having rownum >= #{startRow} and rownum <= #{endRow}
			order by rownum desc, r_date desc
		]]>
	</select>
	
	<!-- 신고목록 개수 -->
	<select id="userReportListCount" parameterType="String" resultType="int">
		select count(*) from report where r_send_uno = #{u_no}
	</select>
	
	<!-- 휴대폰번호 중복체크 -->
	<select id="phoneDBChk" parameterType="String" resultType="int">
		select count(*) from users where u_phone = #{phone}
	</select>

	<!-- 아이디 중복체크 -->
	<select id="chkMail" parameterType="String" resultType="int">
		select count(*) from users where u_email = #{chkMail}
	</select>
	
	<!-- 이름 중복체크 -->
	<select id="chkName" parameterType="String" resultType="int">
		select count(*) from users where u_name = #{chkName}
	</select>

</mapper>
